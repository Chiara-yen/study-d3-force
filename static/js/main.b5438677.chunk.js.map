{"version":3,"sources":["ForceLayout/configs.js","ForceLayout/helpers/selectAllNode.js","ForceLayout/helpers/selectAllLink.js","ForceLayout/helpers/selectAllHull.js","ForceLayout/state.js","ForceLayout/helpers/ticked.js","ForceLayout/helpers/convertToHullPathPoints.js","ForceLayout/helpers/insertHull.js","ForceLayout/helpers/insertLink.js","ForceLayout/helpers/insertNode.js","ForceLayout/helpers/updateNode.js","ForceLayout/updateChart.js","ForceLayout/helpers/toggleGroupNodes.js","ForceLayout/createChart.js","ForceLayout/helpers/setSVG.js","ForceLayout/helpers/setSimulation.js","ForceLayout/helpers/appendHullGroup.js","ForceLayout/helpers/appendLinkGroup.js","ForceLayout/helpers/appendNodeGroup.js","ForceLayout/index.js","DataPrinter/index.js","App.js","serviceWorker.js","index.js"],"names":["EVENTS","eventDispatcher","d3","svgConfig","WIDTH","window","innerWidth","HEIGHT","hullConfig","nodeConfig","number","linkConfig","selectAllNode","svg","select","selectAll","selectAllLink","selectAllHull","nodesData","linksData","groupsData","getGroupsData","ticked","attr","d","x","y","source","target","g","hullPathPoints","nodes","_","points","reduce","acc","node","i","length","push","hullPoints","convertToHullPathPoints","insertHull","enter","append","style","on","call","insertLink","insertNode","wrap","id","group","text","updateNode","update","updateChart","simulation","links","old","Map","data","map","Object","assign","get","join","force","alpha","restart","updateData","toggleGroupNodes","groupId","clickedGroup","originalNodes","nodesDataWithoutGroup","filter","isNeedToCollapse","isNeedToExpand","Boolean","mergedNode","vx","vy","concat","link","sourceOriginalId","targetOriginalId","createChart","svgRef","d3Container","distance","appendHullGroup","appendLinkGroup","appendNodeGroup","chartInterface","setNodeClickCallback","callback","ForceLayout","useRef","chartRef","useEffect","current","console","log","ref","DataPrinter","JSON","stringify","App","useState","state","setstate","type","onClick","data2","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b5438677.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nexport const EVENTS = {\n  CLICK_NODE: 'click_node',\n  CLICK_HULL: 'click_hull',\n};\n\nexport const eventDispatcher = d3.dispatch(\n  EVENTS.CLICK_NODE,\n  EVENTS.CLICK_HULL\n);\n\nexport const svgConfig = {\n  WIDTH: window.innerWidth || 960,\n  HEIGHT: 600,\n};\n\nexport const hullConfig = {\n  GROUP_CLASS_NAME_SELECTOR: 'hulls',\n  CLASS_NAME_SELECTOR: 'hull',\n};\n\nexport const nodeConfig = {\n  GROUP_CLASS_NAME_SELECTOR: 'nodes',\n  CLASS_NAME_SELECTOR: 'node-group',\n  CIRCLE_RADIUS: 30,\n  getGroupNumberColor: (number) => d3.schemeTableau10[number % 10],\n};\n\nexport const linkConfig = {\n  GROUP_CLASS_NAME_SELECTOR: 'links',\n  CLASS_NAME_SELECTOR: 'link',\n  LENGTH: 100,\n};\n","import { nodeConfig } from '../configs';\n\nexport default function selectAllNode(svg) {\n  return svg\n    .select(`.${nodeConfig.GROUP_CLASS_NAME_SELECTOR}`)\n    .selectAll(`.${nodeConfig.CLASS_NAME_SELECTOR}`);\n}\n","import { linkConfig } from '../configs';\n\nexport default function selectAllLink(svg) {\n  return svg\n    .select(`.${linkConfig.GROUP_CLASS_NAME_SELECTOR}`)\n    .selectAll(`.${linkConfig.CLASS_NAME_SELECTOR}`);\n}\n","import { hullConfig } from '../configs';\n\nexport default function selectAllHull(svg) {\n  return svg\n    .select(`.${hullConfig.GROUP_CLASS_NAME_SELECTOR}`)\n    .selectAll(`.${hullConfig.CLASS_NAME_SELECTOR}`);\n}\n","import * as _ from 'lodash';\n\nlet nodesData = [];\nlet linksData = [];\nlet groupsData = {};\n\nfunction updateData(nodes = [], links = []) {\n  nodesData = nodes;\n  linksData = links;\n  groupsData = _.groupBy(nodes, 'group');\n}\n\nfunction getNodesData() {\n  return nodesData;\n}\n\nfunction getLinksData() {\n  return linksData;\n}\n\nfunction getGroupsData() {\n  return groupsData;\n}\n\nexport { updateData, getNodesData, getLinksData, getGroupsData };\n","import * as d3 from 'd3';\nimport convertToHullPathPoints from './convertToHullPathPoints';\nimport selectAllNode from './selectAllNode';\nimport selectAllLink from './selectAllLink';\nimport selectAllHull from './selectAllHull';\nimport { getGroupsData } from '../state';\n\nexport default function ticked(svg) {\n  selectAllNode(svg).attr('transform', (d) => `translate(${d.x},${d.y})`);\n\n  selectAllLink(svg)\n    .attr('x1', (d) => d.source.x)\n    .attr('y1', (d) => d.source.y)\n    .attr('x2', (d) => d.target.x)\n    .attr('y2', (d) => d.target.y);\n\n  selectAllHull(svg).attr('d', (g) => {\n    const nodeGroups = getGroupsData();\n    const hullPathPoints = convertToHullPathPoints(nodeGroups[g]);\n    return d3.line()(hullPathPoints);\n  });\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash';\n\nconst offset = 30;\n\nexport default function convertToHullPathPoints(nodes) {\n  if (_.isEmpty(nodes)) return [];\n\n  const points = nodes.reduce((acc, node, i) => {\n    if (acc[i] && acc[i].length < 2) return acc;\n    acc.push([node.x - offset, node.y - offset]);\n    acc.push([node.x - offset, node.y + offset]);\n    acc.push([node.x + offset, node.y - offset]);\n    acc.push([node.x + offset, node.y + offset]);\n    return acc;\n  }, []);\n  const hullPoints = d3.polygonHull(points);\n  hullPoints.push(hullPoints[0]); // to make path complete\n\n  return hullPoints;\n}\n","import { nodeConfig, EVENTS, eventDispatcher } from '../configs';\n\nexport default function insertHull(enter) {\n  return enter\n    .append('path')\n    .attr('class', 'hull')\n    .style('stroke', (d) => nodeConfig.getGroupNumberColor(d))\n    .style('fill', (d) => nodeConfig.getGroupNumberColor(d))\n    .on('click', (d) => eventDispatcher.call(EVENTS.CLICK_HULL, this, d));\n}\n","import { linkConfig } from '../configs';\n\nexport default function insertLink(enter) {\n  return enter.append('line').attr('class', linkConfig.CLASS_NAME_SELECTOR);\n}\n","import { nodeConfig, EVENTS, eventDispatcher } from '../configs';\n\nexport default function insertNode(enter) {\n  const wrap = enter\n    .append('g')\n    .attr('class', nodeConfig.CLASS_NAME_SELECTOR)\n    .attr('node-id', (d) => d.id)\n    .on('click', (d) => eventDispatcher.call(EVENTS.CLICK_NODE, this, d));\n\n  wrap\n    .append('circle')\n    .attr('class', 'node')\n    .attr('r', nodeConfig.CIRCLE_RADIUS)\n    .attr('fill', (d) => nodeConfig.getGroupNumberColor(d.group));\n\n  wrap\n    .append('text')\n    .attr('class', 'node-label')\n    .text((d) => d.text);\n\n  return wrap;\n}\n","import { nodeConfig } from '../configs';\n\nexport default function updateNode(update) {\n  update\n    .selectAll('circle')\n    .attr('fill', (d) => nodeConfig.getGroupNumberColor(d.group));\n  return update;\n}\n","import * as _ from 'lodash';\nimport insertHull from './helpers/insertHull';\nimport insertLink from './helpers/insertLink';\nimport insertNode from './helpers/insertNode';\nimport updateNode from './helpers/updateNode';\nimport selectAllHull from './helpers/selectAllHull';\nimport selectAllLink from './helpers/selectAllLink';\nimport selectAllNode from './helpers/selectAllNode';\nimport { updateData } from './state';\n\nexport default function updateChart(svg, simulation, { nodes, links }) {\n  const node = selectAllNode(svg);\n  // Make a shallow copy to protect against mutation, while\n  // recycling old nodes to preserve position and velocity.\n  const old = new Map(node.data().map((d) => [d.id, d]));\n  const nodesData = nodes.map((d) => Object.assign(old.get(d.id) || {}, d));\n  const linksData = links.map((d) => Object.assign({}, d));\n\n  // Update chart selections\n  node.data(nodesData, (d) => d.id).join(insertNode, updateNode);\n  selectAllLink(svg)\n    .data(linksData, (d) => [d.source, d.target])\n    .join(insertLink);\n  selectAllHull(svg)\n    .data(_.unionBy(nodesData.map((node) => node.group)), (d) => d)\n    .join(insertHull);\n\n  simulation.nodes(nodesData); // will append 5 props index, vx, vy, x, v on each node object\n  simulation.force('link').links(linksData); // will replace source and target props with the correlate node object\n  simulation.alpha(1).restart();\n\n  updateData(nodesData, linksData);\n}\n","import * as _ from 'lodash';\nimport { getNodesData, getLinksData, getGroupsData } from '../state';\nimport updateChart from '../updateChart';\n\nexport default function toggleGroupNodes(svg, simulation, groupId) {\n  const nodesData = getNodesData();\n  const linksData = getLinksData();\n  const groups = getGroupsData();\n  const clickedGroup = groups[groupId];\n  const originalNodes = _.get(clickedGroup, '[0].nodes');\n  const nodesDataWithoutGroup = nodesData.filter((d) => d.group !== groupId);\n  const isNeedToCollapse = clickedGroup.length >= 2;\n  const isNeedToExpand = !isNeedToCollapse && Boolean(originalNodes);\n\n  if (isNeedToCollapse) {\n    const mergedNode = {\n      nodes: clickedGroup,\n      id: `group-${groupId}`,\n      text: `group-${groupId}`,\n      group: groupId,\n      x: _.meanBy(clickedGroup, 'x'),\n      y: _.meanBy(clickedGroup, 'y'),\n      vx: _.meanBy(clickedGroup, 'vx'),\n      vy: _.meanBy(clickedGroup, 'vy'),\n    };\n\n    const newNodes = nodesDataWithoutGroup.concat(mergedNode);\n\n    const newLinks = linksData.map((link) => {\n      if (link.source.group === groupId) {\n        link.sourceOriginalId = _.clone(link.source.id);\n        link.source = `group-${groupId}`;\n      }\n\n      if (link.target.group === groupId) {\n        link.targetOriginalId = _.clone(link.target.id);\n        link.target = `group-${groupId}`;\n      }\n\n      return link;\n    });\n\n    updateChart(svg, simulation, { nodes: newNodes, links: newLinks });\n  }\n\n  if (isNeedToExpand) {\n    const newNodes = nodesDataWithoutGroup.concat(originalNodes);\n\n    const newLinks = linksData.map((link) => {\n      if (link.source.group === groupId) {\n        link.source = link.sourceOriginalId;\n      }\n      if (link.target.group === groupId) {\n        link.target = link.targetOriginalId;\n      }\n      return link;\n    });\n\n    updateChart(svg, simulation, { nodes: newNodes, links: newLinks });\n  }\n}\n","import { EVENTS, eventDispatcher } from './configs';\nimport setSvg from './helpers/setSVG';\nimport setSimulation from './helpers/setSimulation';\nimport appendHullGroup from './helpers/appendHullGroup';\nimport appendLinkGroup from './helpers/appendLinkGroup';\nimport appendNodeGroup from './helpers/appendNodeGroup';\nimport ticked from './helpers/ticked';\nimport toggleGroupNodes from './helpers/toggleGroupNodes';\nimport updateChart from './updateChart';\n\nexport default function createChart(svgRef) {\n  const svg = setSvg(svgRef);\n  const simulation = setSimulation();\n  simulation.on('tick', () => ticked(svg));\n  appendHullGroup(svg);\n  appendLinkGroup(svg);\n  appendNodeGroup(svg);\n\n  eventDispatcher.on(EVENTS.CLICK_HULL, (groupId) =>\n    toggleGroupNodes(svg, simulation, groupId)\n  );\n\n  const chartInterface = {\n    update: (data = {}) => updateChart(svg, simulation, data),\n    setNodeClickCallback: (callback) =>\n      eventDispatcher.on(EVENTS.CLICK_NODE, callback),\n  };\n  const chart = Object.assign(svg.node(), chartInterface);\n  return chart;\n}\n","import * as d3 from 'd3';\nimport { svgConfig } from '../configs';\n\nexport default function setSvg(d3Container) {\n  const svg = d3\n    .select(d3Container)\n    .attr('width', svgConfig.WIDTH)\n    .attr('height', svgConfig.HEIGHT);\n\n  return svg;\n}\n","import * as d3 from 'd3';\nimport { svgConfig, nodeConfig } from '../configs';\n\nexport default function setSimulation() {\n  const simulation = d3\n    .forceSimulation()\n    .force('charge', d3.forceManyBody())\n    .force('center', d3.forceCenter(svgConfig.WIDTH / 2, svgConfig.HEIGHT / 2))\n    .force('collision', d3.forceCollide(nodeConfig.CIRCLE_RADIUS))\n    .force(\n      'link',\n      d3\n        .forceLink()\n        .id((d) => d.id)\n        .distance(200)\n    );\n\n  return simulation;\n}\n","import { hullConfig } from '../configs';\n\nexport default function appendHullGroup(svg) {\n  svg.append('g').attr('class', hullConfig.GROUP_CLASS_NAME_SELECTOR);\n}\n","import { linkConfig } from '../configs';\n\nexport default function appendLinkGroup(svg) {\n  svg.append('g').attr('class', linkConfig.GROUP_CLASS_NAME_SELECTOR);\n}\n","import { nodeConfig } from '../configs';\n\nexport default function appendNodeGroup(svg) {\n  svg.append('g').attr('class', nodeConfig.GROUP_CLASS_NAME_SELECTOR);\n}\n","import React, { useRef, useEffect } from 'react';\nimport './ForceLayout.css';\nimport createChart from './createChart';\n\nexport default function ForceLayout({ data }) {\n  const svgRef = useRef(null);\n  let chartRef = useRef(null);\n\n  useEffect(() => {\n    chartRef.current = createChart(svgRef.current);\n    chartRef.current.setNodeClickCallback((node) =>\n      console.log('clicked node =>', node)\n    );\n  }, [svgRef]);\n\n  useEffect(() => {\n    chartRef.current.update(data);\n  }, [data]);\n\n  return <svg ref={svgRef} />;\n}\n","import React from 'react';\n\nexport default function DataPrinter({ data }) {\n  const { links, nodes } = data;\n  return (\n    <>\n      <h1>Data</h1>\n      <hr />\n      <h2>Node List</h2>\n      <code>{JSON.stringify(nodes)}</code>\n      <hr />\n      <h2>Link List</h2>\n      <code>{JSON.stringify(links)}</code>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport ForceLayout from './ForceLayout';\nimport DataPrinter from './DataPrinter';\nimport data from './data';\nimport data2 from './data2';\n\nfunction App() {\n  const [state, setstate] = useState(data);\n  const onButtonClick = () => setstate(data2);\n\n  return (\n    <>\n      <ForceLayout data={state} />\n      <button type='button' onClick={onButtonClick}>\n        Set data 2\n      </button>\n      <DataPrinter data={state} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}